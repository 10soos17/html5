=======0420=======
(create, insert, update, drop, rename, alter, truncate)
create table customer(id varchar(20) not null, pwe varchar(20) not null, name varchar(20) not null, phone varchar(30), address varchar(200));

insert into customer values('id001', '1234', 'a', 2, '010-1111-2222', 'seoul');
column id format a5;
column pwd format a5;
SQL> column phone format a13;
SQL> column name format a10;
SQL> colmn address format a10;

create table customer(id varchar(10) unique, pwd varchar(10) not null);
insert into customer values('111', '11111');
insert into customer values('222', '11111');
alter table customer add name varchar2(20);
alter table customer modify name varchar2(20);
alter table customer drop column pwd;

alter table gender add seq number(2);   
insert into gender(seq) values(1);

- source 파일 불러올때
@절대경로;
@C:\temp\emp_example.sql;

select SALARY, SALARY+300 AS "bonus", SALARY * 1.2 FROM EMPLOYEE
WHERE SALARy < 3000;
SELECT SALARY, SALARY+NYL(COMMISSION,0) bonus, COMMISSION FROM EMPLOYEE;
SELECT * FROM EMPLOYEE WHERE COMMISSION IS NULL;

=======0421=======
글자관련
연산관련
날짜관련
형변환관련(TO_CHAR, TO_NUMBER, TO_)
비교관련(NVLIF(expr1, expr2), COALESCE(,...,),
        DECODE(표현식, 조건1, 결과1,
                        조건2, 결과2,
                        조건3, 결과3,  
                        기본결과n)

select ename, upper(ename), lower(ename), initcap(ename) from employee;
select * from employee where lower(job)='clerk';  
select * from employee where initcap(job) = 'CLErk' or upper(job) = 'CLERK';
select concat(ename, job) from employee; -> error
select substr(job,2,3) from employee;
alter table employee add idtest char(14);
update employee set idtest='777777-1234567';

select substr(idtest,8,1),substr(idtest,1,2)||'년'
,substr(idtest,3,2)||'월',substr(idtest,5,2)||'일' from employee;

update employee set idtest='666666-2333333' where eno=7499;

select sysdate from dual;
update employee set idtest='999999-24444' where eno=7521;
select substr(idtest,8,1) from employee;
select substr(trim(idtest),8,1) from employee;

select eno,mod(eno, 1000) from employee;
select 10000 * 11 from employee;
select round(salary, -3) from employee;
select round(salary / 3, 2) from employee;

select ename, hiredate, to_char(hiredate, 'YY-MM'), to_char(hiredate, 'YYYY/MM/DD day')
, to_char(hiredate, 'YYYY/MM/DD HH12:MM:DD') from employee;

* L : 원 표시
select ename, to_char(salary, 'L999,999') from employee;
select ename, to_char(salary, 'L000,999,999') from employee;
select ename, dno, decode(dno, 10, 'ACCOUNTING, 20, 'RESEARCH', 30, 'SALES', 40, 'operation', 'default') as DNAME from employee;
select ename, dno, decode(substr(trim(idtest),8,1), 1, 'MALE', 2, 'FEMALE', 'default') as DNAME from employee;

select substr(hiredate,1,2)년도, substr(hiredate,4,2)달 from employee;
select * from employee where SUBSTR(HIREDATE, 4, 3) = 'APR';

=======0422=======

select count(*) from employee;
select avg(salary) from employee;
select sum(salary) from employee;
 select max(salary) from employee;
 select min(salary) from employee;
 select * from employee where salary=5000;
 select ename, job from employee where salary=800;
 select distinct dno from employee; - distinct 중복 제거
 select count(distinct dno) from employee;
 ...group by dno; 그룹지어 구분할때

 select dno, sum(salary), avg(salary) 부서평균급여 from employee group by dno order by sum(salary) desc;

*inner join / group by / order by
 select employee.dno, dname, sum(salary), avg(salary) dsalary from employee 
 inner join department on employee.dno = department.dno 
 group by employee.dno, dname 
 order by sum(salary) desc;

SELECT shippername,count(shippername) FROM [Orders] inner join shippers inner join customers on orders.shipperid=shippers.shipperid and
customers.customerid=orders.customerid group by shipperName having count(shippername)>60
order by count(shippername) desc

SELECT * FROM v$sqltext


*리눅스 sqlplus 언어 설정하는법

=======0422=======
select * from sungjuk where name like '%k%'; - k자가 들어간 name 모두 선택
select * from test where substr(ename, 2,1) = '길';


- subquery
(()안을 먼저실행))
select ename, salary from employee where salary > (select salary from employee where ename='SCOTT');

select rownum, employee.* from employee;
select rownum, employee.* from employee where rownum between 1 and 3; -> error
select * from (select rownum num, employee.* from employee) where num between 4 and 6; -> ()안을 먼저 실행

- 다중행 서브쿼리(in/any,some/all/exist)
(단일행비교연산자(>,<,=,등)와 다중행비교연산자(IN,ANY,SOME,ALL,EXISTS)를 사용)

All(전부 일치해야 참), ANY(메인쿼리 조건이 서브쿼리 검색 결과와 하나 이상 일치하면 참)
select * from employee where dno=30;
select * from department where dno=30;
select * from employee where salary < any(select salary from employee where dno=30);
select * from employee where salary < all(select salary from employee where dno=30);
- in('=ANY'와 같음)
select * from employee where salary in(select salary from employee where dno=30);

-zipcode 실습(sqldeveloper에서 import,export)
(테이블 만들고 파일 import 실행)
source: https://cafe.naver.com/ceois?iframe_url=/MyCafeIntro.nhn%3Fclubid=29556559

CREATE TABLE ZIPCODE (ZIPCODE VARCHAR2(14), SIDO VARCHAR2(8), GUGUN VARCHAR2(34), 
DONG VARCHAR2(52), RI VARCHAR2(30), BLDG VARCHAR2(80), BUNJI VARCHAR2(34), SEQ NUMBER(10,0), 
PRIMARY KEY (SEQ));

select count(*) from zipcode;
select sido, gugun, count(*) from zipcode group by sido, gugun order by sido;

-DBA DATA 사전
(USER DBA DATA 사전 유저가 오라클 디비에서 생성했던 것들을 확인하는 것(자동생성됨))
(user_tables(테이블), user_constraints(제약조건) 확인)
select * from user_tables;
select * from user_tables where table_name in ('DEPARTMENT', 'EMPLOYEE', 'SALGRADE');
select * from user_constraints;
select * from user_constraints where constraint_name = 'PK_DEPT';

select * from department;
delete from department where dno=50;

-트랜잭션
(commit)

-데이터무결성 제약조건
NOT NULL
unique(모든 로우에 대해서 유일한 값 갖도록(=새 데이터 추가시, 값은 값을 못 넣는 것))
primary key(not null+unipue)
foreign key(칼럼 값이 항상 존재해야 함)
check(범위 조건 지정) 

drop constraint
disable constraint
enable constraint

ex. 
(unique)
create table 무결성(id number(5) not null unique);
insert into 무결성 values(1);
insert into 무결성 values(1); -> error(unique 제약조건 때문에)
(check)
create table gender(sex char(5) default '남', seq number(2));
insert into gender values(null, 1); -> '남'생성

-테이블 복사해서 생성
create table emp as select * from employee where dno=10;
select * from emp;
create table emp1 as select * from employee where dno=20;
select * from emp1;

select * from emp union select * from emp1;(합집합)
select * from employee union all select * from emp1;(?)
select * from employee minus select * from emp1;(차집합)
select * from employee intersect select * from emp1;(교집합)

-view table
create view emp2 as select * from employee where dno=20;
create view emp3 as select ename, loc from employee, department where department.dno=employee.dno;
drop view emp3;


